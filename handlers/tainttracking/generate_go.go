package tainttracking

import (
	"fmt"
	"go/types"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"sort"
	"strings"

	. "github.com/dave/jennifer/jen"
	"github.com/gagliardetto/codebox/gogentools"
	"github.com/gagliardetto/codebox/scanner"
	"github.com/gagliardetto/codemill/x"
	"github.com/gagliardetto/feparser"
	"github.com/gagliardetto/golang-go/cmd/go/not-internal/search"
	. "github.com/gagliardetto/utilz"
	"golang.org/x/mod/modfile"
)

func NewTestFile(includeBoilerplace bool) *File {
	file := NewFile("main")
	// Set a prefix to avoid collision between variable names and packages:
	file.PackagePrefix = "cql"
	// Add comment to file:
	file.HeaderComment("Code generated by https://github.com/gagliardetto/codebox. DO NOT EDIT.")

	if includeBoilerplace {
		{
			// main function:
			file.Func().Id("main").Params().Block()
		}
		{
			// sink function:
			code := Func().
				Id("sink").
				Params(Id("id").Int(), Id("v").Interface()).
				Block()
			file.Add(code.Line())
		}
		{
			// link function (Used in tests to transmit taint from param 0 into param 1):
			code := Func().
				Id("link").
				Params(Id("from").Interface(), Id("into").Interface()).
				Block()
			file.Add(code.Line())
		}
		{
			// newSource functions returns a new tainted thing:
			code := Func().
				Id("newSource").
				Params(Id("id").Int()).
				Interface().
				Block(Return(Nil()))
			file.Add(code.Line())
		}
	}
	return file
}

var (
	IncludeCommentsInGeneratedGo bool
)

func (han *Handler) GenerateGo(parentDir string, mdl *x.XModel) error {
	// TODO
	Sfln(
		"%s: Generating go code for model %q into %q parentDir",
		Kind,
		mdl.Name,
		parentDir,
	)

	if err := mdl.Validate(); err != nil {
		return err
	}
	if err := han.Validate(mdl); err != nil {
		return err
	}
	// TODO:
	// - Validate FlowBlocks.

	// Check if there are multiple versions of a same package:
	mods := mdl.ListModules()
	if x.HasMultiversion(mods) {
		Ln(RedBG("Has multiversion"))
	}
	// If there are no multiple versions of the same module,
	// that means we can save all the code to one file.
	allInOneFile := !x.HasMultiversion(mods)

	// Create the directory for the tests for this model:
	outDir := filepath.Join(parentDir, feparser.NewCodeQlName(mdl.Name))
	MustCreateFolderIfNotExists(outDir, os.ModePerm)

	// Assuming the validation has already been done:
	self := mdl.Methods[0]

	if len(self.Selectors) == 0 {
		Infof("No selectors found for %q method.", self.Name)
		return nil
	}

	allPathVersions := func() []string {
		res := make([]string, 0)
		mods := mdl.ListModules()
		for _, mod := range mods {
			res = append(res, mod.PathVersionClean())
		}
		return res
	}()

	file := NewTestFile(true)
	pathVersionToTypeNames := make(map[string][]string)
	pathVersionToFuncAndVarNames := make(map[string][]string)
	for _, pathVersion := range allPathVersions {
		if !allInOneFile {
			// Reset file:
			file = NewTestFile(true)
		}
		codez := make([]Code, 0)

		b2fe, b2tm, b2itm, err := x.GroupFuncSelectors(self)
		if err != nil {
			Fatalf("Error while GroupFuncSelectors: %s", err)
		}

		testCounter := 0

		{
			cont, ok := b2fe[pathVersion]
			if ok {
				code := BlockFunc(
					func(groupCase *Group) {

						for _, funcQual := range cont {
							fn := x.GetFuncQualifier(funcQual)
							thing := fn.(*feparser.FEFunc)

							gogentools.ImportPackage(file, thing.PkgPath, thing.PkgName)
							pathVersionToFuncAndVarNames[pathVersion] = append(pathVersionToFuncAndVarNames[pathVersion], thing.Name)

							groupCase.Comment(thing.Signature)
							//_, codeElements := GoGetFuncQualifierCodeElements(file, funcQual)
							//groupCase.Add(codeElements...)

							{
								if !funcQual.Flows.Enabled {
									continue
								}
								allCode := generateGoTestBlock_Func(
									file,
									thing,
									funcQual,
									&testCounter,
								)
								for _, block := range allCode {
									if block != nil {
										groupCase.Add(block)
									} else {
										Warnf("NOTHING GENERATED")
									}
								}
							}

						}
					})
				codez = append(codez,
					Comment("Taint-tracking through functions.").
						Line().
						Add(code),
				)
			}
		}
		if false {
			cont, ok := b2tm[pathVersion]
			if ok {
				codezTypeMethods := make([]Code, 0)
				keys := func(v map[string][]*x.FuncQualifier) []string {
					res := make([]string, 0)
					for key := range v {
						res = append(res, key)
					}
					sort.Strings(res)
					return res
				}(cont)
				for _, receiverTypeID := range keys {
					methodQualifiers := cont[receiverTypeID]
					if len(methodQualifiers) == 0 {
						continue
					}

					qual := methodQualifiers[0]
					source := x.GetCachedSource(qual.Path, qual.Version)
					if source == nil {
						Fatalf("Source not found: %s@%s", qual.Path, qual.Version)
					}
					// Find receiver type:
					typ := x.FindTypeByID(source, receiverTypeID)
					if typ == nil {
						Fatalf("Type not found: %q", receiverTypeID)
					}

					gogentools.ImportPackage(file, typ.PkgPath, typ.PkgName)
					pathVersionToTypeNames[pathVersion] = append(pathVersionToTypeNames[pathVersion], typ.TypeName)

					code := BlockFunc(
						func(groupCase *Group) {

							for _, methodQual := range methodQualifiers {
								fn := x.GetFuncQualifier(methodQual)
								thing := fn.(*feparser.FETypeMethod)

								groupCase.Comment(thing.Func.Signature)
								_, codeElements := GoGetFuncQualifierCodeElements(file, methodQual)
								groupCase.Add(codeElements...)

							}
						})
					codezTypeMethods = append(codezTypeMethods,
						Commentf("Untrusted flow sources from method calls on %s.", typ.QualifiedName).
							Line().
							Add(code),
					)
				}
				codez = append(codez,
					Comment("Untrusted flow sources from method calls.").
						Line().
						Block(codezTypeMethods...),
				)
			}
		}

		if false {
			cont, ok := b2itm[pathVersion]
			if ok {
				codezIfaceMethods := make([]Code, 0)
				keys := func(v map[string][]*x.FuncQualifier) []string {
					res := make([]string, 0)
					for key := range v {
						res = append(res, key)
					}
					sort.Strings(res)
					return res
				}(cont)
				for _, receiverTypeID := range keys {
					methodQualifiers := cont[receiverTypeID]
					if len(methodQualifiers) == 0 {
						continue
					}

					qual := methodQualifiers[0]
					source := x.GetCachedSource(qual.Path, qual.Version)
					if source == nil {
						Fatalf("Source not found: %s@%s", qual.Path, qual.Version)
					}
					// Find receiver type:
					typ := x.FindTypeByID(source, receiverTypeID)
					if typ == nil {
						Fatalf("Type not found: %q", receiverTypeID)
					}

					file := NewTestFile(true)
					gogentools.ImportPackage(file, typ.PkgPath, typ.PkgName)
					pathVersionToTypeNames[pathVersion] = append(pathVersionToTypeNames[pathVersion], typ.TypeName)

					code := BlockFunc(
						func(groupCase *Group) {

							for _, methodQual := range methodQualifiers {
								fn := x.GetFuncQualifier(methodQual)
								thing := fn.(*feparser.FEInterfaceMethod)

								groupCase.Comment(thing.Func.Signature)
								_, codeElements := GoGetFuncQualifierCodeElements(file, methodQual)
								groupCase.Add(codeElements...)

							}
						})
					codezIfaceMethods = append(codezIfaceMethods,
						Commentf("Untrusted flow sources from method calls on %s interface.", typ.QualifiedName).
							Line().
							Add(code),
					)
				}

				codez = append(codez,
					Comment("Untrusted flow sources from interface method calls.").
						Line().
						Block(codezIfaceMethods...),
				)
			}
		}

		{
			path, _ := scanner.SplitPathVersion(pathVersion)
			isStd := search.IsStandardImportPath(path)
			if !isStd {
				// If path is NOT part of standard library, then add the depstubber generation comment.
				file.Comment(generateDepstubberComment(path, pathVersionToTypeNames[pathVersion], pathVersionToFuncAndVarNames[pathVersion]))
				file.Comment("//go:generate depstubber -write_module_txt").Line()
				// TODO:
				// - go mod tidy # required to generate go.sum
				// - depstubber -write_module_txt
				// - depstubber -vendor github.com/my/package Type1,Type2 SomeFunc,SomeVariable
			}

			file.Comment("Untrusted flow sources from package: " + pathVersion)
		}
		file.Func().Id(feparser.FormatCodeQlName(pathVersion)).Params().Block(codez...)
		if !allInOneFile {
			// TODO: remove debug print.
			fmt.Printf("%#v", file)

			pkgDstDirpath := filepath.Join(outDir, feparser.FormatID("Model", mdl.Name, "For", feparser.FormatCodeQlName(pathVersion)))
			MustCreateFolderIfNotExists(pkgDstDirpath, os.ModePerm)

			assetFileName := feparser.FormatID("Model", mdl.Name, "For", feparser.FormatCodeQlName(pathVersion)) + ".go"
			if err := saveFile(pkgDstDirpath, assetFileName, file); err != nil {
				Fatalf("Error while saving go file: %s", err)
			}

			if err := genGoModFile(pkgDstDirpath, pathVersion); err != nil {
				Fatalf("Error while saving go.mod file: %s", err)
			}
		}
	}

	if allInOneFile {
		// TODO: remove debug print.
		fmt.Printf("%#v", file)

		pkgDstDirpath := outDir
		MustCreateFolderIfNotExists(pkgDstDirpath, os.ModePerm)

		assetFileName := feparser.FormatID("Model", mdl.Name) + ".go"
		if err := saveFile(pkgDstDirpath, assetFileName, file); err != nil {
			Fatalf("Error while saving go file: %s", err)
		}

		pathVersions := make([]string, 0)
		{
			for pathVersion := range pathVersionToFuncAndVarNames {
				pathVersions = append(pathVersions, pathVersion)
			}
			for pathVersion := range pathVersionToTypeNames {
				pathVersions = append(pathVersions, pathVersion)
			}
		}

		pathVersions = Deduplicate(pathVersions)

		if err := genGoModFile(pkgDstDirpath, pathVersions...); err != nil {
			Fatalf("Error while saving go.mod file: %s", err)
		}
	}
	Q(pathVersionToFuncAndVarNames)
	Q(pathVersionToTypeNames)
	// TODO: include codeql assertions and test query.
	return nil
}

func saveFile(outDir string, assetFileName string, file *File) error {
	// Save Go assets:
	assetFilepath := path.Join(outDir, assetFileName)

	// Create file Golang file:
	goFile, err := os.Create(assetFilepath)
	if err != nil {
		panic(err)
	}
	defer goFile.Close()

	// Write generated Golang to file:
	Infof("Saving Golang assets to %q", MustAbs(assetFilepath))
	return file.Render(goFile)
}

func genGoModFile(outDir string, pathVersions ...string) error {
	outDir = MustAbs(outDir)

	// Create a `go.mod` file requiring the specified version of the package:
	mf := &modfile.File{}
	mf.AddModuleStmt("example.com/hello/world")

	for _, pathVersion := range pathVersions {
		path, version := scanner.SplitPathVersion(pathVersion)
		isStd := search.IsStandardImportPath(path)
		if !isStd {
			mf.AddNewRequire(path, version, true)
		}
	}

	mf.Cleanup()

	mfBytes, err := mf.Format()
	if err != nil {
		return err
	}
	// Write `go.mod` file:
	goModFilepath := filepath.Join(outDir, "go.mod")
	Infof("Saving go.mod to %q", MustAbs(goModFilepath))
	err = ioutil.WriteFile(goModFilepath, mfBytes, os.ModePerm)
	if err != nil {
		return err
	}
	return nil
}

func generateDepstubberComment(path string, typeNames []string, funcAndVarNames []string) string {
	return Sf(
		"//go:generate depstubber -vendor %s %s %s",
		path,
		strings.Join(typeNames, ","),
		strings.Join(funcAndVarNames, ","),
	)
}

// Comments adds comments to a Group (if enabled), and returns the group.
func Comments(group *Group, comments ...string) *Group {
	if IncludeCommentsInGeneratedGo {
		for _, comment := range comments {
			group.Line().Comment(comment)
		}
	}
	return group
}
func GoGetFuncQualifierCodeElements(file *File, qual *x.FuncQualifier) (x.FuncInterface, []Code) {

	source := x.GetCachedSource(qual.Path, qual.Version)
	if source == nil {
		Fatalf("Source not found: %s@%s", qual.Path, qual.Version)
	}
	// Find the func/type-method/interface-method:
	fn := x.FindFuncByID(source, qual.ID)
	if fn == nil {
		Fatalf("Func not found: %q", qual.ID)
	}

	codeElements := make([]Code, 0)
	parameterIndexes := make([]int, 0)
	resultIndexes := make([]int, 0)
	considerReceiver := false
PosLoop:
	for pos, ok := range qual.Pos {
		if !ok {
			continue PosLoop
		}

		elTyp, _, relIndex, err := fn.GetRelativeElement(pos)
		if err != nil {
			Fatalf("Error while GetRelativeElement: %s", err)
		}

		switch elTyp {
		case feparser.ElementReceiver:
			{
				considerReceiver = true
			}
		case feparser.ElementParameter:
			{
				parameterIndexes = append(parameterIndexes,
					relIndex,
				)
			}
		case feparser.ElementResult:
			{
				resultIndexes = append(resultIndexes,
					relIndex,
				)
			}
		default:
			panic(Sf("Unknown type: %q", elTyp))
		}
	}

	lenReceiver, lenParams, _ := fn.Lengths()
	hasReceiver := lenReceiver == 1

	fe := fn.GetFunc()
	tpFun := fe.GetOriginal().GetType().(*types.Signature)
	receiver := fn.GetReceiver()

	// Compile array of the zero values of the function parameters:
	paramZeroVals := gogentools.ScanTupleOfZeroValues(file, tpFun.Params(), fe.GetOriginal().IsVariadic())

	// Compile array of the zero values of the function results:
	resultZeroVals := gogentools.ScanTupleOfZeroValues(file, tpFun.Results(), fe.GetOriginal().IsVariadic())

	code := BlockFunc(
		func(groupCase *Group) {

			codeCallFunc := Null()
			if hasReceiver {
				varName := gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("receiver", receiver.TypeName))
				receiver.VarName = varName
				gogentools.ComposeVarDeclaration(file, groupCase, varName, receiver.GetOriginal(), false)
				codeCallFunc = Id(varName).Dot(fe.Name)
			} else {
				codeCallFunc = Qual(fe.PkgPath, fe.Name)
			}

			// Decide parameter names, and declare variables that will be passed as those parameters:
			if len(parameterIndexes) > 0 {
				if len(parameterIndexes) == 1 {
					// If only one parameter is considered, the use a single var declaration:
					i := parameterIndexes[0]

					isLast := i == lenParams-1
					isVariadicParam := isLast && fe.GetOriginal().Variadic

					varName := gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("param", fe.Parameters[i].VarName))
					fe.Parameters[i].VarName = varName
					gogentools.ComposeVarDeclaration(file, groupCase, varName, fe.Parameters[i].GetOriginal().GetType(), isVariadicParam)
				} else {
					// If multiple parameters are considered, then use a group var declaration:
					varTypes := make([]*VarNameAndType, 0)
					for i := range paramZeroVals {
						isConsidered := IntSliceContains(parameterIndexes, i)
						if isConsidered {
							varName := gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("param", fe.Parameters[i].VarName))
							fe.Parameters[i].VarName = varName

							isLast := i == lenParams-1
							isVariadicParam := isLast && fe.GetOriginal().Variadic

							varTypes = append(varTypes, &VarNameAndType{
								Name:       varName,
								Type:       fe.Parameters[i].GetOriginal().GetType(),
								IsVariadic: isVariadicParam,
							})
						}
					}
					ComposeGroupVarDeclaration(file, groupCase, varTypes)
				}
			}

			codeResultList := Null()
			if len(resultIndexes) > 0 {
				for i := range resultZeroVals {
					isConsidered := IntSliceContains(resultIndexes, i)
					if isConsidered {
						varName := gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("result", fe.Results[i].VarName))
						fe.Results[i].VarName = varName
					}
				}

				codeResultList = ListFunc(func(resGroup *Group) {
					for i, v := range fe.Results {
						isConsidered := IntSliceContains(resultIndexes, i)
						if isConsidered {
							resGroup.Id(v.VarName)
						} else {
							resGroup.Id("_")
						}
					}
				}).Op(":=")
			}

			// Call the function, passing the considered parameters:
			groupCase.Add(codeResultList).Add(codeCallFunc).CallFunc(
				func(call *Group) {
					for i, zero := range paramZeroVals {
						isConsidered := IntSliceContains(parameterIndexes, i)
						if isConsidered {
							call.Id(fe.Parameters[i].VarName)
						} else {
							call.Add(zero)
						}
					}
				},
			)

			// Sink the parameters:
			if len(parameterIndexes) > 0 {
				//groupCase.Comment("Sink parameters:")
				if len(parameterIndexes) == 1 {
					i := parameterIndexes[0]
					groupCase.Id("sink").Call(Id(fe.Parameters[i].VarName))
				} else {
					codeParamIDs := make([]Code, 0)
					for i := range paramZeroVals {
						isConsidered := IntSliceContains(parameterIndexes, i)
						if isConsidered {
							codeParamIDs = append(codeParamIDs, Id(fe.Parameters[i].VarName).Op(",").Line())
						}
					}
					groupCase.Id("sink").Call(Line().Add(codeParamIDs...).Line())
				}
			}
			// Sink the results:
			if len(resultIndexes) > 0 {
				//groupCase.Comment("Sink results:")
				if len(resultIndexes) == 1 {
					i := resultIndexes[0]
					groupCase.Id("sink").Call(Id(fe.Results[i].VarName))
				} else {
					codeResultIDs := make([]Code, 0)
					for i := range resultZeroVals {
						isConsidered := IntSliceContains(resultIndexes, i)
						if isConsidered {
							codeResultIDs = append(codeResultIDs, Id(fe.Results[i].VarName).Op(",").Line())
						}
					}
					groupCase.Id("sink").Call(Line().Add(codeResultIDs...).Line())
				}
			}
			// Sink the receiver:
			if considerReceiver {
				//groupCase.Comment("Sink the receiver:")
				groupCase.Id("sink").Call(Id(receiver.VarName))
			}
		})

	codeElements = append(codeElements,
		code,
	)

	return fn, codeElements
}

type VarNameAndType struct {
	Name       string
	Type       types.Type
	IsVariadic bool
}

// declare:
// `var (
//		name1 Type1
//		name2 Type2
// 	)`
func ComposeGroupVarDeclaration(file *File, group *Group, decs []*VarNameAndType) {
	stat := newStatement()

	for _, dec := range decs {
		if dec.IsVariadic {
			if slice, ok := dec.Type.(*types.Slice); ok {
				gogentools.ComposeTypeDeclaration(file, stat.Id(dec.Name), slice.Elem())
			} else {
				gogentools.ComposeTypeDeclaration(file, stat.Id(dec.Name), dec.Type)
			}
		} else {
			gogentools.ComposeTypeDeclaration(file, stat.Id(dec.Name), dec.Type)
		}
		stat.Line()
	}
	group.Var().Parens(stat)
}
func newStatement() *Statement {
	return &Statement{}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
type StatementAndName struct {
	Statement    *Statement
	TestFuncName string
}

func validateBlockLen(fn x.FuncInterface, blocks ...*feparser.FlowBlock) error {
	for blockIndex, block := range blocks {
		if blockInpLen := len(block.Inp); blockInpLen != fn.Len() {
			return fmt.Errorf("block %v: .Inp has wrong len: %v", blockIndex, blockInpLen)
		}
		if blockOutpLen := len(block.Outp); blockOutpLen != fn.Len() {
			return fmt.Errorf("block %v: .Outp has wrong len: %v", blockIndex, blockOutpLen)
		}
	}
	return nil
}

// for each block, generate a golang test function for each inp and outp combination.
func generateGoTestBlock_Func(file *File, fe *feparser.FEFunc, qual *x.FuncQualifier, testCounter *int) []Code {
	childBlocks := make([]Code, 0)
	for blockIndex, block := range qual.Flows.Blocks {
		for inpIndex, inpOk := range block.Inp {
			if !inpOk {
				continue
			}
			for outIndex, outpOk := range block.Out {
				if !outpOk {
					continue
				}
				childBlock := generateGoChildBlock_Func(
					file,
					fe,
					inpIndex,
					outIndex,
				)
				{
					if childBlock != nil {

						enclosed := BlockFunc(func(block *Group) {
							block.Id("result").Op(":=").Func().
								ParamsFunc(
									func(group *Group) {
										group.Add(Id("sourceCQL").Interface())
									},
								).
								Interface().
								Add(childBlock).Parens(Id("newSource").Call(Lit(*testCounter)))

							block.Id("sink").Call(Lit(*testCounter), Id("result"))
						})
						*testCounter++

						childBlocks = append(childBlocks, enclosed)
					} else {
						Warnf(Sf("NOTHING GENERATED; block %v, inp %v, outp %v", blockIndex, inpIndex, outIndex))
					}
				}
			}
		}
	}

	return childBlocks
}
func generateGoChildBlock_Func(file *File, fe *feparser.FEFunc, inpIndex int, outIndex int) *Statement {

	inpElem, _, inpRelIndex, err := fe.GetRelativeElement(inpIndex)
	if err != nil {
		panic(err)
	}
	outElem, _, outRelIndex, err := fe.GetRelativeElement(outIndex)
	if err != nil {
		panic(err)
	}
	Parameter := feparser.ElementParameter
	Result := feparser.ElementResult

	switch {
	case inpElem == Parameter && outElem == Parameter:
		return generate_ParaFuncPara(file, fe, inpRelIndex, outRelIndex)
	case inpElem == Parameter && outElem == Result:
		return generate_ParaFuncResu(file, fe, inpRelIndex, outRelIndex)
	case inpElem == Result && outElem == Parameter:
		return generate_ResuFuncPara(file, fe, inpRelIndex, outRelIndex)
	case inpElem == Result && outElem == Result:
		return generate_ResuFuncResu(file, fe, inpRelIndex, outRelIndex)
	default:
		panic(Sf("unhandled case: inp.Element %v, out.Element %v", inpElem, outElem))
	}
}

func generate_ParaFuncPara(file *File, fe *feparser.FEFunc, indexIn int, indexOut int) *Statement {
	// from: param
	// medium: func
	// into: param

	in := fe.Parameters[indexIn]
	out := fe.Parameters[indexOut]

	in.VarName = gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("from", in.TypeName))
	out.VarName = gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("into", out.TypeName))

	inVarName := in.VarName
	outVarName := out.VarName

	code := BlockFunc(
		func(groupCase *Group) {
			Comments(groupCase, Sf("The flow is from `%s` into `%s`.", inVarName, outVarName))

			Comments(groupCase, Sf("Assume that `sourceCQL` has the underlying type of `%s`:", inVarName))
			gogentools.ComposeTypeAssertion(file, groupCase, in.VarName, in.GetOriginal().GetType(), in.GetOriginal().IsVariadic())

			Comments(groupCase, Sf("Declare `%s` variable:", outVarName))
			gogentools.ComposeVarDeclaration(file, groupCase, out.VarName, out.GetOriginal().GetType(), out.GetOriginal().IsVariadic())

			Comments(groupCase,
				"Call the function that transfers the taint",
				Sf("from the parameter `%s` to parameter `%s`;", inVarName, outVarName),
				Sf("`%s` is now tainted.", outVarName),
			)

			gogentools.ImportPackage(file, fe.PkgPath, fe.PkgName)

			groupCase.Qual(fe.PkgPath, fe.Name).CallFunc(
				func(call *Group) {

					tpFun := fe.GetOriginal().GetType().(*types.Signature)

					zeroVals := gogentools.ScanTupleOfZeroValues(file, tpFun.Params(), fe.GetOriginal().IsVariadic())

					for i, zero := range zeroVals {
						isConsidered := i == indexIn || i == indexOut
						if isConsidered {
							call.Id(fe.Parameters[i].VarName)
						} else {
							call.Add(zero)
						}
					}

				},
			)

			Comments(groupCase, Sf("Return the tainted `%s`:", outVarName))
			groupCase.Return(Id(out.VarName))
		})

	return code
}

func generate_ParaFuncResu(file *File, fe *feparser.FEFunc, indexIn int, indexOut int) *Statement {
	// from: param
	// medium: func
	// into: result

	in := fe.Parameters[indexIn]
	out := fe.Results[indexOut]

	in.VarName = gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("from", in.TypeName))
	out.VarName = gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("into", out.TypeName))

	inVarName := in.VarName
	outVarName := out.VarName

	code := BlockFunc(
		func(groupCase *Group) {
			Comments(groupCase, Sf("The flow is from `%s` into `%s`.", inVarName, outVarName))

			Comments(groupCase, Sf("Assume that `sourceCQL` has the underlying type of `%s`:", inVarName))
			gogentools.ComposeTypeAssertion(file, groupCase, in.VarName, in.GetOriginal().GetType(), in.GetOriginal().IsVariadic())

			Comments(groupCase,
				"Call the function that transfers the taint",
				Sf("from the parameter `%s` to result `%s`", inVarName, outVarName),
				Sf("(`%s` is now tainted).", outVarName),
			)
			groupCase.ListFunc(func(resGroup *Group) {
				for i, v := range fe.Results {
					if i == indexOut {
						resGroup.Id(v.VarName)
					} else {
						resGroup.Id("_")
					}
				}
			}).Op(":=").Qual(fe.PkgPath, fe.Name).CallFunc(
				func(call *Group) {

					tpFun := fe.GetOriginal().GetType().(*types.Signature)

					zeroVals := gogentools.ScanTupleOfZeroValues(file, tpFun.Params(), fe.GetOriginal().IsVariadic())

					for i, zero := range zeroVals {
						isConsidered := i == indexIn
						if isConsidered {
							call.Id(fe.Parameters[i].VarName)
						} else {
							call.Add(zero)
						}
					}

				},
			)

			Comments(groupCase, Sf("Return the tainted `%s`:", outVarName))
			groupCase.Return(Id(out.VarName))
		})
	return code
}
func generate_ResuFuncPara(file *File, fe *feparser.FEFunc, indexIn int, indexOut int) *Statement {
	// from: result
	// medium: func
	// into: param
	// NOTE: does this actually happen? It needs extra steps, right?

	in := fe.Results[indexIn]
	out := fe.Parameters[indexOut]

	in.VarName = gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("from", in.TypeName))
	out.VarName = gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("into", out.TypeName))

	inVarName := in.VarName
	outVarName := out.VarName

	code := BlockFunc(
		func(groupCase *Group) {
			Comments(groupCase, Sf("The flow is from `%s` into `%s`.", inVarName, outVarName))

			Comments(groupCase, Sf("Assume that `sourceCQL` has the underlying type of `%s`:", inVarName))
			gogentools.ComposeTypeAssertion(file, groupCase, in.VarName, in.GetOriginal().GetType(), in.GetOriginal().IsVariadic())

			Comments(groupCase, Sf("Declare `%s` variable:", out.VarName))
			gogentools.ComposeVarDeclaration(file, groupCase, out.VarName, out.GetOriginal().GetType(), out.GetOriginal().IsVariadic())
			gogentools.ImportPackage(file, out.PkgPath, out.PkgName)

			Comments(groupCase,
				"Call the function that will transfer the taint",
				Sf("from the result `intermediateCQL` to parameter `%s`:", outVarName),
			)
			groupCase.ListFunc(func(resGroup *Group) {
				for i, _ := range fe.Results {
					if i == indexIn {
						resGroup.Id("intermediateCQL")
					} else {
						resGroup.Id("_")
					}
				}
			}).Op(":=").Qual(fe.PkgPath, fe.Name).CallFunc(
				func(call *Group) {

					tpFun := fe.GetOriginal().GetType().(*types.Signature)

					zeroVals := gogentools.ScanTupleOfZeroValues(file, tpFun.Params(), fe.GetOriginal().IsVariadic())

					for i, zero := range zeroVals {
						isConsidered := i == indexOut
						if isConsidered {
							call.Id(fe.Parameters[i].VarName)
						} else {
							call.Add(zero)
						}
					}

				},
			)

			Comments(groupCase,
				Sf(
					"Extra step (`%s` taints `intermediateCQL`, which taints `%s`:",
					in.VarName,
					out.VarName,
				),
			)
			groupCase.Id("link").Call(Id(in.VarName), Id("intermediateCQL"))

			Comments(groupCase, Sf("Return the tainted `%s`:", out.VarName))
			groupCase.Return(Id(out.VarName))
		})
	return code
}
func generate_ResuFuncResu(file *File, fe *feparser.FEFunc, indexIn int, indexOut int) *Statement {
	// from: result
	// medium: func
	// into: result

	in := fe.Results[indexIn]
	out := fe.Results[indexOut]

	in.VarName = gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("from", in.TypeName))
	out.VarName = gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("into", out.TypeName))

	inVarName := in.VarName
	outVarName := out.VarName

	code := BlockFunc(
		func(groupCase *Group) {
			Comments(groupCase, Sf("The flow is from `%s` into `%s`.", inVarName, outVarName))

			Comments(groupCase, Sf("Assume that `sourceCQL` has the underlying type of `%s`:", inVarName))
			gogentools.ComposeTypeAssertion(file, groupCase, in.VarName, in.GetOriginal().GetType(), in.GetOriginal().IsVariadic())
			gogentools.ImportPackage(file, out.PkgPath, out.PkgName)

			Comments(groupCase,
				"Call the function that transfers the taint",
				Sf("from the result `%s` to result `%s`", inVarName, outVarName),
				"(extra steps needed)",
			)
			groupCase.ListFunc(func(resGroup *Group) {
				for i, v := range fe.Results {
					if i == indexIn || i == indexOut {
						if i == indexIn {
							resGroup.Id("intermediateCQL")
						} else {
							resGroup.Id(v.VarName)
						}
					} else {
						resGroup.Id("_")
					}
				}
			}).Op(":=").Qual(fe.PkgPath, fe.Name).CallFunc(
				func(call *Group) {

					tpFun := fe.GetOriginal().GetType().(*types.Signature)

					zeroVals := gogentools.ScanTupleOfZeroValues(file, tpFun.Params(), fe.GetOriginal().IsVariadic())

					for _, zero := range zeroVals {
						call.Add(zero)
					}

				},
			)

			Comments(groupCase,
				Sf(
					"Extra step (`%s` taints `intermediateCQL`, which taints `%s`:",
					in.VarName,
					out.VarName,
				))
			groupCase.Id("link").Call(Id(in.VarName), Id("intermediateCQL"))

			Comments(groupCase, Sf("Return the tainted `%s`:", out.VarName))
			groupCase.Return(Id(out.VarName))
		})
	return code
}

package untrustedflowsource

import (
	"fmt"
	"go/types"
	"sort"

	. "github.com/dave/jennifer/jen"
	"github.com/gagliardetto/codebox/gogentools"
	"github.com/gagliardetto/codemill/x"
	"github.com/gagliardetto/feparser"
	. "github.com/gagliardetto/utilz"
)

func NewTestFile(includeBoilerplace bool) *File {
	file := NewFile("main")
	// Set a prefix to avoid collision between variable names and packages:
	file.PackagePrefix = "cql"
	// Add comment to file:
	file.HeaderComment("Code generated by https://github.com/gagliardetto/codemill. DO NOT EDIT.")

	if includeBoilerplace {
		{
			// main function:
			//file.Func().Id("main").Params().Block()
		}
		{
			// sink function:
			code := Func().
				Id("sink").
				//Params(Id("id").Int(), Id("v").Interface()).
				Params(Id("v").Op("...").Interface()).
				Block()
			file.Add(code.Line())
		}
		{
			// link function (Used in tests to transmit taint from param 0 into param 1):
			code := Func().
				Id("link").
				Params(Id("from").Interface(), Id("into").Interface()).
				Block()
			file.Add(code.Line())
		}
		{
			// source function returns a new tainted thing:
			code := Func().
				Id("source").
				Params(Id("id").Int()).
				Interface().
				Block(Return(Nil()))
			file.Add(code.Line())
		}
	}
	return file
}

var (
	IncludeCommentsInGeneratedGo bool
)

func (han *Handler) GenerateGo(dir string, mdl *x.XModel) error {
	// TODO
	Sfln(
		"Generating go code for model %q into %q dir",
		mdl.Name,
		dir,
	)

	{
		// Check if there are multiple versions of a same package:
		mods := mdl.ListModules()
		if x.HasMultiversion(mods) {
			Ln(RedBG("Has multiversion"))
		}
	}
	if err := mdl.Validate(); err != nil {
		return err
	}
	if err := han.Validate(mdl); err != nil {
		return err
	}

	// Assuming the validation has already been done:
	self := mdl.Methods[0]

	if len(self.Selectors) == 0 {
		Infof("No selectors found for %q method.", self.Name)
		return nil
	}

	{
		b2fe, b2tm, _, err := x.GroupFuncSelectors(self)
		if err != nil {
			Fatalf("Error while GroupFuncSelectors: %s", err)
		}

		{
			keys := func(v x.BasicToFEFuncs) []string {
				res := make([]string, 0)
				for key := range v {
					res = append(res, key)
				}
				sort.Strings(res)
				return res
			}(b2fe)
			for _, pathVersion := range keys {
				cont := b2fe[pathVersion]

				file := NewTestFile(true)

				code := BlockFunc(
					func(groupCase *Group) {

						for _, funcQual := range cont {
							fn := x.GetFuncQualifier(funcQual)
							thing := fn.(*feparser.FEFunc)

							gogentools.ImportPackage(file, thing.PkgPath, thing.PkgName)

							groupCase.Comment(thing.Signature)
							_, codeElements := GoGetFuncQualifierCodeElements(file, funcQual)
							groupCase.Add(codeElements...)

						}
					})

				file.Func().Id("main").Params().Add(code)
				fmt.Printf("%#v", file)
			}
		}

		{
			keys := func(v x.BasicToTypeIDToMethods) []string {
				res := make([]string, 0)
				for key := range v {
					res = append(res, key)
				}
				sort.Strings(res)
				return res
			}(b2tm)
			for _, pathVersion := range keys {
				cont := b2tm[pathVersion]

				keys := func(v map[string][]*x.FuncQualifier) []string {
					res := make([]string, 0)
					for key := range v {
						res = append(res, key)
					}
					sort.Strings(res)
					return res
				}(cont)
				for _, receiverTypeID := range keys {
					methodQualifiers := cont[receiverTypeID]
					if len(methodQualifiers) == 0 {
						continue
					}

					qual := methodQualifiers[0]
					source := x.GetCachedSource(qual.Path, qual.Version)
					if source == nil {
						Fatalf("Source not found: %s@%s", qual.Path, qual.Version)
					}
					// Find receiver type:
					typ := x.FindTypeByID(source, receiverTypeID)
					if typ == nil {
						Fatalf("Type not found: %q", qual.ID)
					}

					file := NewTestFile(true)

					code := BlockFunc(
						func(groupCase *Group) {

							for _, methodQual := range methodQualifiers {
								fn := x.GetFuncQualifier(methodQual)
								thing := fn.(*feparser.FETypeMethod)

								gogentools.ImportPackage(file, thing.Receiver.PkgPath, thing.Receiver.PkgName)

								groupCase.Comment(thing.Func.Signature)
								_, codeElements := GoGetFuncQualifierCodeElements(file, methodQual)
								groupCase.Add(codeElements...)

							}
						})

					file.Func().Id("main").Params().Add(code)
					fmt.Printf("%#v", file)

				}

			}
		}

	}

	return nil
}

// Comments adds comments to a Group (if enabled), and returns the group.
func Comments(group *Group, comments ...string) *Group {
	if IncludeCommentsInGeneratedGo {
		for _, comment := range comments {
			group.Line().Comment(comment)
		}
	}
	return group
}
func GoGetFuncQualifierCodeElements(file *File, qual *x.FuncQualifier) (x.FuncInterface, []Code) {

	source := x.GetCachedSource(qual.Path, qual.Version)
	if source == nil {
		Fatalf("Source not found: %s@%s", qual.Path, qual.Version)
	}
	// Find the func/type-method/interface-method:
	fn := x.FindFuncByID(source, qual.ID)
	if fn == nil {
		Fatalf("Func not found: %q", qual.ID)
	}

	codeElements := make([]Code, 0)
	parameterIndexes := make([]int, 0)
	resultIndexes := make([]int, 0)
	considerReceiver := false
PosLoop:
	for pos, ok := range qual.Pos {
		if !ok {
			continue PosLoop
		}

		elTyp, _, relIndex, err := fn.GetRelativeElement(pos)
		if err != nil {
			Fatalf("Error while GetRelativeElement: %s", err)
		}

		switch elTyp {
		case feparser.ElementReceiver:
			{
				considerReceiver = true
			}
		case feparser.ElementParameter:
			{
				parameterIndexes = append(parameterIndexes,
					relIndex,
				)
			}
		case feparser.ElementResult:
			{
				resultIndexes = append(resultIndexes,
					relIndex,
				)
			}
		default:
			panic(Sf("Unknown type: %q", elTyp))
		}
	}

	lenReceiver, _, _ := fn.Lengths()
	hasReceiver := lenReceiver == 1

	var fe *feparser.FEFunc
	var tpFun *types.Signature
	var receiver *feparser.FEReceiver
	if hasReceiver {

		switch thing := fn.(type) {
		case *feparser.FETypeMethod:
			fe = thing.Func
			tpFun = fe.GetOriginal().GetType().(*types.Signature)
			receiver = thing.Receiver
		case *feparser.FEInterfaceMethod:
			fe = thing.Func
			tpFun = fe.GetOriginal().GetType().(*types.Signature)
			receiver = thing.Receiver
		}

	} else {
		fe = fn.(*feparser.FEFunc)
		tpFun = fe.GetOriginal().GetType().(*types.Signature)
	}

	// Compile array of the zero values of the function parameters:
	paramZeroVals := gogentools.ScanTupleOfZeroValues(file, tpFun.Params(), fe.GetOriginal().IsVariadic())

	// Compile array of the zero values of the function results:
	resultZeroVals := gogentools.ScanTupleOfZeroValues(file, tpFun.Results(), fe.GetOriginal().IsVariadic())

	code := BlockFunc(
		func(groupCase *Group) {

			codeCallFunc := Null()
			if hasReceiver {
				varName := gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("receiver", receiver.TypeName))
				receiver.VarName = varName
				gogentools.ComposeVarDeclaration(file, groupCase, varName, receiver.GetOriginal(), fe.GetOriginal().Variadic)
				codeCallFunc = Id(varName).Dot(fe.Name)
			} else {
				codeCallFunc = Qual(fe.PkgPath, fe.Name)
			}

			// Decide parameter names, and declare variables that will be passed as those parameters:
			if len(parameterIndexes) > 0 {
				if len(parameterIndexes) == 1 {
					// If only one parameter is considered, the use a single var declaration:
					i := parameterIndexes[0]
					varName := gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("param", fe.Parameters[i].VarName))
					fe.Parameters[i].VarName = varName
					gogentools.ComposeVarDeclaration(file, groupCase, varName, fe.Parameters[i].GetOriginal().GetType(), fe.GetOriginal().Variadic)
				} else {
					// If multiple parameters are considered, the use a group var declaration:
					varTypes := make([]*VarNameAndType, 0)
					for i := range paramZeroVals {
						isConsidered := IntSliceContains(parameterIndexes, i)
						if isConsidered {
							varName := gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("param", fe.Parameters[i].VarName))
							fe.Parameters[i].VarName = varName

							varTypes = append(varTypes, &VarNameAndType{
								Name: varName,
								Type: fe.Parameters[i].GetOriginal().GetType(),
							})
						}
					}
					ComposeGroupVarDeclaration(file, groupCase, varTypes, fe.GetOriginal().Variadic)
				}
			}

			codeResultList := Null()
			if len(resultIndexes) > 0 {
				for i := range resultZeroVals {
					isConsidered := IntSliceContains(resultIndexes, i)
					if isConsidered {
						varName := gogentools.NewNameWithPrefix(feparser.NewLowerTitleName("result", fe.Results[i].VarName))
						fe.Results[i].VarName = varName
					}
				}

				codeResultList = ListFunc(func(resGroup *Group) {
					for i, v := range fe.Results {
						isConsidered := IntSliceContains(resultIndexes, i)
						if isConsidered {
							resGroup.Id(v.VarName)
						} else {
							resGroup.Id("_")
						}
					}
				}).Op(":=")
			}

			// Call the function, passing the considered parameters:
			groupCase.Add(codeResultList).Add(codeCallFunc).CallFunc(
				func(call *Group) {
					for i, zero := range paramZeroVals {
						isConsidered := IntSliceContains(parameterIndexes, i)
						if isConsidered {
							call.Id(fe.Parameters[i].VarName)
						} else {
							call.Add(zero)
						}
					}
				},
			)

			// Sink the parameters:
			if len(parameterIndexes) > 0 {
				codeParamIDs := make([]Code, 0)
				for i := range paramZeroVals {
					isConsidered := IntSliceContains(parameterIndexes, i)
					if isConsidered {
						codeParamIDs = append(codeParamIDs, Id(fe.Parameters[i].VarName).Op(",").Line())
					}
				}
				groupCase.Comment("Sink parameters:")
				groupCase.Id("sink").Call(Line().Add(codeParamIDs...).Line())
			}
			// Sink the results:
			if len(resultIndexes) > 0 {
				codeResultIDs := make([]Code, 0)
				for i := range resultZeroVals {
					isConsidered := IntSliceContains(resultIndexes, i)
					if isConsidered {
						codeResultIDs = append(codeResultIDs, Id(fe.Results[i].VarName).Op(",").Line())
					}
				}
				groupCase.Comment("Sink results:")
				groupCase.Id("sink").Call(Line().Add(codeResultIDs...).Line())
			}
			// Sink the receiver:
			if considerReceiver {
				groupCase.Comment("Sink the receiver:")
				groupCase.Id("sink").Call(Id(receiver.VarName))
			}
		})

	codeElements = append(codeElements,
		code,
	)

	return fn, codeElements
}

type VarNameAndType struct {
	Name string
	Type types.Type
}

// declare:
// `var (
//		name1 Type1
//		name2 Type2
// 	)`
func ComposeGroupVarDeclaration(file *File, group *Group, decs []*VarNameAndType, isVariadic bool) {

	stat := newStatement()

	for _, dec := range decs {
		if isVariadic {
			gogentools.ComposeTypeDeclaration(file, stat.Id(dec.Name), dec.Type.(*types.Slice).Elem())
		} else {
			gogentools.ComposeTypeDeclaration(file, stat.Id(dec.Name), dec.Type)
		}
		stat.Line()
	}

	group.Var().Parens(stat)
}
func newStatement() *Statement {
	return &Statement{}
}
